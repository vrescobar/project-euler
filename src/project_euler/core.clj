(ns project-euler.core)

(defn problem1
  "If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 1000."
  []
  (let [num 1000
        multiplemn #(zero? (mod %2 %1))
        mod3? (partial multiplemn 3)
        mod5? (partial multiplemn 5)]
    (reduce + (filter #(or (mod3? %1) (mod5? %1)) (range 1 num)))))


(defn problem2
  "Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms." []
  []
  (let [fibo-seq (lazy-cat [1 1] (map + fibo-seq (rest fibo-seq)))
        fibo4M (take-while (partial > 4000000) fibo-seq)]
    (apply + (filter even? fibo4M))))



(defn sieve [s]
  (cons (first s)
        (lazy-seq (sieve (filter #(not= 0 (mod % (first s)))
                                 (rest s))))))
(def primes (lazy-seq (sieve (iterate inc 2))))


(defn red
  [num div]
   (if (zero? (mod num div))
     (red (/ num div) div)
     num))

(defn find-max-prime-factor [num prime-seq]
  (let [prime (first prime-seq)]
    (if (<= (/ num prime) 1)
      num
      (find-max-prime-factor (red num prime) (rest prime-seq)))))


(defn problem3
  "The prime factors of 13195 are 5, 7, 13 and 29.
What is the largest prime factor of the number 600851475143 ?" []
  []
  (find-max-prime-factor 600851475143 primes))

(defn problem4
  ""
  [])

(def project-euler
  {1 { :func problem1
       :desc "Multiples of 3 and 5"
       :test {:input [] :output [233168]}}

   2 { :func problem2
       :desc "Even Fibonacci numbers"
       :test {:input [] :output [4613732]}
       }
   3 { :func problem3
       :desc "Largest prime factor"
       :test {:input [] :output [6857]}
       }
   4 { :func problem4
       :desc
       :test {:input [] :output []}}})


